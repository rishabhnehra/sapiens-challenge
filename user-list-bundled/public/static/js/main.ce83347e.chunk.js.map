{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","userList","setUserList","firstName","lastName","user","setUser","useEffect","getUsersList","a","fetch","response","json","data","handleChange","fieldName","e","target","value","handleSubmit","preventDefault","console","log","JSON","stringify","method","headers","body","Form","onSubmit","Group","controlId","Label","Control","type","name","placeholder","onChange","Button","variant","ListGroup","map","Item","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oRAiFeA,MArEf,WAAgB,IAAD,EACmBC,mBAAiB,IADpC,mBACNC,EADM,KACIC,EADJ,OAEWF,mBAAe,CACrCG,UAAW,GACXC,SAAU,KAJC,mBAENC,EAFM,KAEAC,EAFA,KAObC,qBAAU,WACNC,MACD,IAEH,IAOMA,EAAY,uCAAG,8BAAAC,EAAA,sEACIC,MAAM,+BADV,cACbC,EADa,gBAEAA,EAASC,OAFT,OAEbC,EAFa,OAGnBX,EAAYW,GAHO,2CAAH,qDAMZC,EAAe,SAACC,GAAD,OAAuB,SAACC,GAC3CV,EAAQ,2BACHD,GADE,kBAEJU,EAAYC,EAAEC,OAAOC,WAIpBC,EAAY,uCAAG,WAAOH,GAAP,iBAAAP,EAAA,6DACnBO,EAAEI,iBACFC,QAAQC,IAAIC,KAAKC,UAAUnB,IAFR,SAGIK,MAAM,8BAA+B,CAC1De,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMJ,KAAKC,UAAUnB,KARJ,cAGbM,EAHa,gBAUAA,EAASC,OAVT,OAUbC,EAVa,OAWnBX,EAAY,GAAD,mBAAKD,GAAL,CAAeY,KA9B1BP,EAAQ,CACNH,UAAW,GACXC,SAAU,KAiBO,4CAAH,sDAelB,OACE,qCACE,eAACwB,EAAA,EAAD,CAAMC,SAAUV,EAAhB,UACE,eAACS,EAAA,EAAKE,MAAN,CAAYC,UAAU,gBAAtB,UACE,cAACH,EAAA,EAAKI,MAAN,yBACA,cAACJ,EAAA,EAAKK,QAAN,CAAcC,KAAK,OAAOC,KAAK,YAAYC,YAAY,mBAAmBlB,MAAK,OAAEb,QAAF,IAAEA,OAAF,EAAEA,EAAMF,UAAWkC,SAAUvB,EAAa,kBAE3H,eAACc,EAAA,EAAKE,MAAN,CAAYC,UAAU,eAAtB,UACE,cAACH,EAAA,EAAKI,MAAN,wBACA,cAACJ,EAAA,EAAKK,QAAN,CAAcC,KAAK,OAAOC,KAAK,WAAWC,YAAY,kBAAkBlB,MAAK,OAAEb,QAAF,IAAEA,OAAF,EAAEA,EAAMD,SAAUiC,SAAUvB,EAAa,iBAExH,cAACwB,EAAA,EAAD,CAAQC,QAAQ,UAAUL,KAAK,SAA/B,uBAKF,cAACM,EAAA,EAAD,UACGvC,EAASwC,KAAI,SAAApC,GAAI,OAAI,cAACmC,EAAA,EAAUE,KAAX,oBAAkCrC,EAAKsC,GAAvC,YAA6CtC,EAAKF,UAAlD,YAA+DE,EAAKD,WAA/CC,EAAKsC,aC7DzCC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ce83347e.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\ninterface User {\n  id?: string,\n  firstName: string,\n  lastName: string\n};\n\nfunction App() {\n  const [userList, setUserList] = useState<User[]>([]);\n  const [user, setUser] = useState<User>({\n    firstName: \"\",\n    lastName: \"\"\n  });\n\n  useEffect(() => {\n      getUsersList();\n  }, []);\n\n  const clearData = () => {\n    setUser({\n      firstName: \"\",\n      lastName: \"\"\n    });\n  }\n\n  const getUsersList = async () => {\n    const response = await fetch(\"http://localhost:4000/users\")\n    const data = await response.json();\n    setUserList(data);\n  }\n\n  const handleChange = (fieldName: string) => (e: React.ChangeEvent<HTMLInputElement>) => {\n    setUser({\n      ...user,\n      [fieldName]: e.target.value\n    });\n  };\n\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    console.log(JSON.stringify(user));\n    const response = await fetch(\"http://localhost:4000/users\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(user)\n    });\n    const data = await response.json();\n    setUserList([...userList, data]);\n    clearData();\n  }\n\n  return (\n    <>\n      <Form onSubmit={handleSubmit}>\n        <Form.Group controlId=\"formFirstName\">\n          <Form.Label>First Name</Form.Label>\n          <Form.Control type=\"name\" name=\"firstName\" placeholder=\"Enter First Name\" value={user?.firstName} onChange={handleChange(\"firstName\")} />\n        </Form.Group>\n        <Form.Group controlId=\"formLastName\">\n          <Form.Label>Last Name</Form.Label>\n          <Form.Control type=\"name\" name=\"lastName\" placeholder=\"Enter Last Name\" value={user?.lastName} onChange={handleChange(\"lastName\")} />\n        </Form.Group>\n        <Button variant=\"primary\" type=\"submit\">\n          Submit\n        </Button>\n      </Form>\n\n      <ListGroup>\n        {userList.map(user => <ListGroup.Item key={user.id}>{`${user.id} ${user.firstName} ${user.lastName}`}</ListGroup.Item>)}\n      </ListGroup>\n    </>\n  )\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}